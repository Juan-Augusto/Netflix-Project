{"version":3,"sources":["Tmdb.js","components/Moviepresentation.js","components/MovieRow.js","components/FeaturedMovie.js","images/netflixlogo.png","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","listL","results","length","style","marginLeft","width","map","item","key","src","Moviepresentation","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","netflixlogo","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","loadAll","Tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","scrollListener","scrollY","addEventListener","removeEventListener","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aaac6adc.chunk.js","sourcesContent":["const API_KEY = \"8f9419430d6827e16792b47d8bcda1a4\";\r\nconst API_BASE = \"https://api.themoviedb.org/3\";\r\n\r\n/*\r\n    -Originais Netflix\r\n    -Recomendados (Trending)\r\n    -Em alta (Top Rated)\r\n    -Ação\r\n    -Comédia\r\n    -Terror\r\n    -Romance\r\n    -Documentários\r\n\r\n*/\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`); //Requisição de um serviço externo = Espera a resposta desse serviço\r\n    const json = await req.json();\r\n    return json;\r\n}\r\nexport default {\r\n    getHomeList: async ()=> {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`/discover/tv?with_network=213&languange=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para você',\r\n                items: await basicFetch(`/trending/all/week?languange=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentários',\r\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n\r\n            }\r\n            \r\n            \r\n\r\n\r\n        ]\r\n    },\r\n\r\ngetMovieInfo: async (movieId, type)=> {\r\n    let info = {};\r\n    if(movieId){\r\n        switch(type){\r\n            case 'movie':\r\n                info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n            case 'tv':\r\n                info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n                break;\r\n            default: \r\n                info = null;\r\n                break;    \r\n        }\r\n    }\r\n    return info;\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\n\r\nexport default () => {\r\n    return(\r\n        <h1>teste</h1>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './MovieRow.css';\r\nimport Moviepresentation from './Moviepresentation.js'\r\n\r\n\r\nexport default ({title, items}) => {\r\n    const [scrollX, setScrollX] = useState(0);\r\n    const handleLeftArrow = () => {\r\n        let x = scrollX + Math.round(window.innerWidth/2);\r\n        if(x>0){\r\n            x=0;\r\n        }\r\n        setScrollX(x)\r\n    }\r\n\r\n    \r\n\r\n    const handleRightArrow = () => {\r\n        let x = scrollX - Math.round(window.innerWidth/2)\r\n        let listL = items.results.length * 150;\r\n        if((window.innerWidth - listL) > x){\r\n            x = (window.innerWidth - listL) - 60;\r\n        }\r\n        setScrollX(x)\r\n\r\n    }\r\n\r\n    return(\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n            <div className=\"movieRow--Left\" onClick={handleLeftArrow}>\r\n                B\r\n            </div>\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                B\r\n            </div>\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\"style={{\r\n                    marginLeft: scrollX,\r\n                    width: items.results.length * 150\r\n                }}>\r\n                    \r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <a src={Moviepresentation}><img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title}/></a>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './FeaturedMovie.css';\r\n\r\n\r\nexport default ({item}) => {\r\n\r\n    let firstDate = new Date(item.first_air_date);\r\n    let genres = []\r\n    for (let i in item.genres){\r\n        genres.push(item.genres[i].name)\r\n    }\r\n    let description = item.overview\r\n    if(description.length > 200){\r\n        description = description.substring(0,200) + '...';\r\n    }\r\n    return (\r\n            <section className=\"featured\" style = {{\r\n                backgroundSize: 'cover',\r\n                backgroundPosition: 'center',\r\n                backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\r\n            }}>\r\n                <div className=\"featured--vertical\">\r\n                    <div className=\"featured--horizontal\">\r\n                        <div className=\"featured--name\">{item.original_name}</div>\r\n                        <div className=\"featured--info\">\r\n                            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n                            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n                            <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !=1 ? 's' : ''}</div>\r\n                        </div>\r\n                        <div className=\"featured--description\">{description}</div>\r\n                        <div className=\"featured--buttons\">\r\n                            <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">Assitir</a>\r\n                            <a href={`/list/add/${item.id}`} className=\"featured--listbutton\">+Minha lista</a>\r\n                        </div>\r\n                        <div className=\"featured--genres\">\r\n                            <strong>Gêneros:</strong>{genres.join( ' , ')}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/netflixlogo.7f032ac9.png\";","import React from 'react';\r\nimport './Header.css';\r\nimport netflixlogo from '../images/netflixlogo.png'\r\n\r\n\r\nexport default ({black}) =>{\r\n    return(\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\" >\r\n                <a href=\"/\">\r\n                    <img src={netflixlogo} alt=\"logo Netflix\"/>\r\n                </a>\r\n            </div>\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://ih1.redbubble.net/image.618393699.1999/flat,1000x1000,075,f.u2.jpg\" alt=\"Logo Usuário\"/>\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie';\nimport Header from './components/Header';\n\n\n\nexport default () => {  \n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n  useEffect(() =>{\n    const loadAll = async () =>{\n      //Pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // Pegando filme em destaque\n      let originals = list.filter(i => i.slug ==='originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1))\n      let chosen = originals[0].items.results[randomChosen]\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo)\n    }\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n      const scrollListener = () =>{\n        if(window.scrollY>50){\n          setBlackHeader(true);\n        }else{\n          setBlackHeader(false)\n        }\n      }\n      window.addEventListener('scroll', scrollListener);\n      return () =>{\n        window.removeEventListener('scroll', scrollListener);\n      }\n  }, [])\n\n\n  return(\n    <div className=\"page\">\n      <Header black={blackHeader}/>\n      {featuredData &&\n      <FeaturedMovie item = {featuredData} />\n      }\n      <section className=\"lists\">\n        {movieList.map((item, key) =>(\n        <MovieRow key={key} title={item.title} items={item.items}/>\n        \n        ))}\n      </section>\n      <footer>\n          <p>\n\n            Direitos de imagem para Netflix<br/>\n            Dados de <a href=\"https://www.themoviedb.org/?language=pt-BR\">The Movie Database</a>    \n          </p>\n                <p>\n                  Minhas redes:<br/>    \n                  <a href=\"https://www.linkedin.com/in/juan-soares-881877177/\" target=\"blank\">LinkedIn</a>|\n                  <a href=\"https://www.youtube.com/channel/UCO_mBpadEe467FAJjNQWD1g\" target=\"blank\">YouTube</a>\n                </p>\n      </footer>\n      {movieList.length <= 0 &&\n      <div className=\"loading\">\n          <img src=\"https://i.gifer.com/origin/36/36527397c208b977fa3ef21f68c0f7b2.gif\" alt=\"carregando\" />\n      </div>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}